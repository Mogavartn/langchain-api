import os
from fastapi import FastAPI, HTTPException, Request
from langchain.memory import ConversationBufferMemory
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.text_splitter import CharacterTextSplitter
import json

app = FastAPI()

# RÃ©cupÃ©ration de la clÃ© API depuis une variable dâ€™environnement
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")
if not os.environ.get("OPENAI_API_KEY"):
    raise ValueError("OPENAI_API_KEY is not set in environment variables")

# Initialisation de la mÃ©moire (stockÃ©e en mÃ©moire temporaire, non persistante)
memory_store = {}

# Extraction des blocs de rÃ©ponses Ã  partir de la structure complexe
blocs_data = {
    "meta": {
        "version": "8.0",
        "description": "Base de donnÃ©es complÃ¨te IA WhatsApp - JAK Company x WeiWei",
        "priority_rules": [
            "DETECTION_PROBLEME_PAIEMENT_FORMATION",
            "FILTRAGE_OBLIGATOIRE_AVANT_ESCALADE",
            "REPRODUCTION_EXACTE_DES_BLOCS",
            "TON_WHATSAPP_AVEC_EMOJIS"
        ]
    },
    "config": {
        "horaires_support": "Du lundi au vendredi, de 9h Ã  17h (hors pause dÃ©jeuner)",
        "reseaux_sociaux": {
            "instagram": "https://hi.switchy.io/InstagramWeiWei",
            "snapchat": "https://hi.switchy.io/SnapChatWeiWei"
        },
        "formulaire_affiliation": "https://mrqz.to/AffiliationPromotion",
        "programme_jak": "https://swiy.co/programmeprojak"
    },
    "regles_comportementales": {
        "detection_paiement_formation": {...},  # SimplifiÃ© pour briÃ¨vetÃ©
        "style_obligatoire": {...},
        "gestion_agressivite": {
            "response": "ÃŠtre impoli ne fera pas avancer la situation plus vite. Bien au contraire. Souhaites-tu que je te propose un poÃ¨me ou une chanson d'amour pour apaiser ton cÅ“ur ? ðŸ’Œ"
        }
    },
    "blocs_reponses": {
        "bloc_A": {"id": "suivi_entreprise", "response": "Bien notÃ© ðŸ‘Œ\nPour te rÃ©pondre au mieux, est-ce que tu sais :\nâ€¢ Environ quand la formation s'est terminÃ©e ?\nâ€¢ Et comment elle a Ã©tÃ© financÃ©e (par une entreprise directement, un OPCO, ou autre) ?\nðŸ‘‰ Une fois que j'ai Ã§a, je te dis si le dÃ©lai est normal ou si on doit faire une vÃ©rification ensemble ðŸ˜Š"},
        "bloc_B": {"id": "ambassadeur_nouveau", "response": "Salut ðŸ˜„\nOui, on propose un programme super simple pour gagner de l'argent en nous envoyant des contacts intÃ©ressÃ©s ðŸ’¼ ðŸ’¸\n\nðŸŽ¯ Voici comment Ã§a marche :\nâœ… 1. Tu t'abonnes Ã  nos rÃ©seaux pour suivre les actus\nðŸ‘‰ Insta : https://hi.switchy.io/InstagramWeiWei\nðŸ‘‰ Snap : https://hi.switchy.io/SnapChatWeiWei\n\nâœ… 2. Tu nous transmets une liste de contacts\nNom + prÃ©nom + tÃ©lÃ©phone ou email (SIRET si c'est pro, c'est encore mieux)\nðŸ”— Formulaire : https://mrqz.to/AffiliationPromotion\n\nâœ… 3. Tu touches une commission jusqu'Ã  60 % si un dossier est validÃ© ðŸ¤‘\nTu peux Ãªtre payÃ© directement sur ton compte perso (jusqu'Ã  3000 â‚¬/an et 3 virements)\nAu-delÃ , on peut t'aider Ã  crÃ©er une micro-entreprise, c'est rapide âœ¨\n\nTu veux qu'on t'aide Ã  dÃ©marrer ? Ou tu veux dÃ©jÃ  envoyer ta premiÃ¨re liste ? ðŸ“²"},
        # Ajoute les autres blocs (bloc_C, bloc_D, etc.) avec leurs "response"
    },
    "blocs_complementaires": {
        "sans_reseaux_sociaux": {"id": "sans_reseaux_sociaux", "response": "Pas de souci si tu n'es pas sur Insta ou Snap ðŸ˜Œ Tu peux simplement nous envoyer des contacts potentiellement intÃ©ressÃ©s. Ã‡a fonctionne trÃ¨s bien aussi ðŸ˜‰"},
        "legalite_programme": {"id": "legalite_programme", "response": "On ne peut pas inscrire une personne dans une formation si son but est d'Ãªtre rÃ©munÃ©rÃ©e pour Ã§a. En revanche, si tu fais la formation sÃ©rieusement, tu peux ensuite participer au programme d'affiliation et parrainer d'autres personnes."}
        # Ajoute les autres blocs complÃ©mentaires
    }
}

# Extraire tous les blocs avec une rÃ©ponse
blocs = []
for category in ["blocs_reponses", "blocs_complementaires", "regles_comportementales"]:
    if category in blocs_data:
        for bloc_id, bloc_data in blocs_data[category].items():
            if "response" in bloc_data:
                blocs.append({"id": bloc_data.get("id", bloc_id), "response": bloc_data["response"]})

# Initialisation du vector store (lazy-loaded dans la fonction)
def initialize_vector_store():
    texts = [bloc["response"] for bloc in blocs]
    embeddings = OpenAIEmbeddings()
    text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
    docs = text_splitter.create_documents(texts)
    return FAISS.from_documents(docs, embeddings)

vector_store = initialize_vector_store()

@app.post("/")
async def process_message(request: Request):
    try:
        body = await request.json()
        user_message = body.get("message_original", "")
        matched_bloc_response = body.get("matched_bloc_response", "")
        wa_id = body.get("wa_id", "")

        # Initialisation de la mÃ©moire pour cet utilisateur
        if wa_id not in memory_store:
            memory_store[wa_id] = ConversationBufferMemory()
        memory = memory_store[wa_id]

        # Ajout du message utilisateur Ã  la mÃ©moire
        memory.chat_memory.add_user_message(user_message)

        # Si un bloc a dÃ©jÃ  Ã©tÃ© trouvÃ©, le retourner
        if matched_bloc_response:
            memory.chat_memory.add_ai_message(matched_bloc_response)
            return {
                "matched_bloc_response": matched_bloc_response,
                "memory": memory.load_memory_variables({})["history"]
            }

        # Recherche sÃ©mantique pour trouver un bloc pertinent
        similar_docs = vector_store.similarity_search(user_message, k=1)
        best_match = None
        for doc in similar_docs:
            for bloc in blocs:
                if bloc["response"] == doc.page_content:
                    best_match = bloc
                    break

        if best_match:
            matched_bloc_response = best_match["response"]
            memory.chat_memory.add_ai_message(matched_bloc_response)
            return {
                "matched_bloc_response": matched_bloc_response,
                "memory": memory.load_memory_variables({})["history"]
            }

        # Si rien nâ€™est trouvÃ©, escalade
        escalade_response = "Je vais faire suivre Ã  la bonne personne dans lâ€™Ã©quipe ðŸ˜Š Notre Ã©quipe est disponible du lundi au vendredi, de 9h Ã  17h (hors pause dÃ©jeuner)."
        memory.chat_memory.add_ai_message(escalade_response)
        return {
            "matched_bloc_response": escalade_response,
            "memory": memory.load_memory_variables({})["history"]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))